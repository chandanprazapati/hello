import React, { useEffect, useRef, useState } from "react";
import { AiOutlineDownload } from "react-icons/ai";
import SeoOptimization from "../../../components/reusableDesign/SeoOptimzation";
import {
  getIndexCase,
  getLegalAanusuchi,
} from "../../../services/apiServices/legalCase/legalCaseService";
import { office } from "../../../services/apiServices/common/office/officeService";
import { useReactToPrint } from "react-to-print";
import { englishToNepali } from "../../../utils/utility";

export default function AnusuchiFour() {
  // to get the caseList
  const [apiDataCase, setApiDataCase] = useState([]);
  console.log(apiDataCase, "apiDataCase");
  const [caseId, setCaseId] = useState([]);
  const [loading, setLoading] = useState(true);

  console.log(caseId, "apiDataCase");

  useEffect(() => {
    const fetchedData = async () => {
      getIndexCase(17).then(({ status, data, message }) => {
        try {
          if (status) {
            setApiDataCase(data);
            setLoading(false);
          } else status === false;
          {
            setLoading(false);
          }
        } catch (error) {
          toast.error(message, {
            autoClose: 1000,
          });
        }
      });
    };
    fetchedData();
  }, []);

  const handleCase = (e) => {
    setCaseId(e.target.value);
  };

  const caseOptions = apiDataCase.map((item) => {
    return (
      <option value={item.id} key={item.id}>
        {item.caseTypeName}
      </option>
    );
  });

  // to set the office data
  const [apiDataOffice, setApiDataOffice] = useState([]);

  useEffect(() => {
    const fetchedData = () => {
      office().then(({ status, data, message }) => {
        try {
          if (status) {
            setApiDataOffice(data);
          }
        } catch (error) {
          toast.error(message, {
            autoClose: 1000,
          });
        }
      });
    };
    fetchedData();
  }, [setApiDataOffice]);

  //   fetching api for aanusuchi
  const [apiData, setApiData] = useState([]);

  console.log(apiData, "apiData");

  useEffect(() => {
    let fetchedData = () => {
      getLegalAanusuchi(16).then((response) => {
        try {
          response.status === true;
          {
            setApiData(response.data);
            setLoading(false);
          }
        } catch (error) {
          toast.success("Fetched Data", {
            icon: "üöÄ",
            autoClose: 1000,
          });
        }
      });
    };
    fetchedData();
  }, [caseId, setApiData, setLoading]);

  const componentRef = useRef();

  const handlePrint = useReactToPrint({
    content: () => componentRef.current,
  });

  return (
    <div>
      <form>
        <SeoOptimization title="‡§Ö‡§®‡•Å‡§∏‡•Ç‡§ö‡•Ä ‚Äì‡•™" />
        <div className="pt-4">
          <div className="grid lg:grid-cols-3  gap-5 px-5 pt-10 border border-black border-dashed shadow-2xl bg-gray-100  ">
            <div className="font-bold text-lg ">
              ‡§µ‡§ø‡§µ‡§æ‡§¶ / ‡§â‡§ú‡•Å‡§∞‡•Ä‡§ï‡•ã ‡§Ö‡§®‡•Å‡§∏‡•Ç‡§ö‡•Ä ‚Äì‡•®‡§ï‡§æ ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§∏‡§ø‡§∞‡•ç‡§ú‡§®‡§æ ‡§ó‡§∞‡•ç‡§® ‡§µ‡§ø‡§µ‡§æ‡§¶ / ‡§â‡§ú‡•Å‡§∞‡•Ä
              ‡§Ö‡§®‡§ø‡§µ‡§æ‡§∞‡•ç‡§Ø ‡§õ‡§æ‡§®‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç ||
            </div>

            <div className="relative z-0 w-full  group">
              <select
                onChange={handleCase}
                value={caseId}
                className="peer requiredField"
              >
                <option value="">---‡§µ‡§ø‡§µ‡§æ‡§¶ / ‡§â‡§ú‡•Å‡§∞‡•Ä ‡§õ‡§æ‡§®‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç ---</option>

                {caseOptions}
              </select>
              <label className="label">
                ‡§µ‡§ø‡§µ‡§æ‡§¶ / ‡§â‡§ú‡•Å‡§∞‡•Ä
                <span className="requiredField">*</span>
              </label>
            </div>
          </div>
        </div>
      </form>

      <div className="flex justify-end py-4 ">
        <button
          className="flex justify-end items-center bg-gray-200 rounded-xl p-3 px-5 gap-2"
          onClick={handlePrint}
        >
          <AiOutlineDownload size={20} />
          Print
        </button>
      </div>

      <div ref={componentRef}>
        <div className="  px-7">
          <div className="border-2 border-b py-20">
            <div className="text-center">
              <p className=" leading-1 text-sm">
                ‡§Ö‡§®‡•Å‡§∏‡•Ç‡§ö‡•Ä -‡•™ <br /> (‡§¶‡§´‡§æ ‡•®‡•ß ‡§ï‡•ã ‡§â‡§™‡§¶‡§´‡§æ (‡•®) ‡§∏‡§Å‡§ó ‡§∏‡§Æ‡•ç‡§¨‡§®‡•ç‡§ß‡§ø‡§§) <br />
                ‡§â‡§ú‡•Å‡§∞‡•Ä‡§ï‡•ã ‡§¢‡§æ‡§Å‡§ö‡§æ
              </p>
              <p className="py-6 leading-10 text-lg font-bold">
                {apiDataOffice?.map((items, index) => {
                  return (
                    <div key={index}>
                      {items?.palikaName},‡§ï‡§æ‡§®‡•Ç‡§®‡•Ä ‡§Æ‡§æ‡§Æ‡§ø‡§≤‡§æ ‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä ‡§®‡•ç‡§Ø‡§æ‡§Ø‡§ø‡§ï ‡§∏‡§Æ‡§ø‡§§‡•Ä
                      ‡§∏‡§Æ‡§ï‡•ç‡§∑ ‡§™‡•á‡§∂ ‡§ó‡§∞‡•á‡§ï‡•ã
                    </div>
                  );
                })}{" "}
                <br /> ‡§®‡§ø‡§µ‡•á‡§¶‡§® -‡§™‡§§‡•ç‡§∞
              </p>
              <div className="py-4 text-justify px-4 text-sm">
                {apiData?.petitionerrViewModelList?.map((items, index) => {
                  return (
                    <div key={index}>
                      <span className="font-bold"> {items?.districtName} </span>
                      , ‡§ú‡§ø‡§≤‡•ç‡§≤‡§æ{" "}
                      <span className="font-bold"> {items?.palikaName} </span> ,
                      ‡§µ‡§°‡§æ ‡§®.{" "}
                      <span className="font-bold">
                        {" "}
                        {englishToNepali(items?.wardNo)}‡§Æ‡§æ{" "}
                      </span>{" "}
                      ‡§¨‡§∏‡•ç‡§®‡•á ‡§ï‡•ã ‡§®‡§æ‡§§‡§ø/‡§®‡§æ‡§§‡§ø‡§®‡•Ä ‡§ï‡•ã ‡§õ‡•ã‡§∞‡§æ/‡§õ‡•ã‡§∞‡•Ä/‡§∂‡•ç‡§∞‡•Ä‡§Æ‡§§‡•Ä ‡§µ‡§∞‡•ç‡§∑{" "}
                      <span className="font-bold">
                        {" "}
                        {englishToNepali(items?.age)}{" "}
                      </span>{" "}
                      ‡§ï‡•ã <span className="font-bold"> {items?.fullName} </span>{" "}
                      ‡§®‡§ø‡§µ‡•á‡§¶‡§ï (‡§™‡•ç‡§∞‡§•‡§Æ ‡§™‡§ï‡•ç‡§∑) ‡§Æ‡•ã‡§¨‡§æ‡§à‡§≤ ‡§®{" "}
                      <span className="font-bold">
                        {" "}
                        {englishToNepali(items?.mobile)}{" "}
                      </span>
                    </div>
                  );
                })}
              </div>

              <span className="py-8 font-bold">‡§µ‡§ø‡§∞‡•Å‡§¶‡•ç‡§ß</span>

              <div className="py-4 text-justify px-4 text-sm ">
                {apiData?.respondenttViewModelList?.map((items, index) => {
                  return (
                    <div key={index}>
                      <span className="font-bold"> {items?.districtName} </span>
                      , ‡§ú‡§ø‡§≤‡•ç‡§≤‡§æ{" "}
                      <span className="font-bold"> {items?.palikaName} </span> ,
                      ‡§µ‡§°‡§æ ‡§®.{" "}
                      <span className="font-bold">
                        {" "}
                        {englishToNepali(items?.wardNo)}‡§Æ‡§æ{" "}
                      </span>{" "}
                      ‡§¨‡§∏‡•ç‡§®‡•á ‡§ï‡•ã ‡§®‡§æ‡§§‡§ø/‡§®‡§æ‡§§‡§ø‡§®‡•Ä ‡§ï‡•ã ‡§õ‡•ã‡§∞‡§æ/‡§õ‡•ã‡§∞‡•Ä/‡§∂‡•ç‡§∞‡•Ä‡§Æ‡§§‡•Ä ‡§µ‡§∞‡•ç‡§∑{" "}
                      <span className="font-bold">
                        {" "}
                        {englishToNepali(items?.age)}{" "}
                      </span>{" "}
                      ‡§ï‡•ã <span className="font-bold"> {items?.fullName} </span>{" "}
                      ‡§®‡§ø‡§µ‡•á‡§¶‡§ï (‡§™‡•ç‡§∞‡§•‡§Æ ‡§™‡§ï‡•ç‡§∑) ‡§Æ‡•ã‡§¨‡§æ‡§à‡§≤ ‡§®{" "}
                      <span className="font-bold">
                        {" "}
                        {englishToNepali(items?.mobile)}{" "}
                      </span>
                    </div>
                  );
                })}
              </div>
            </div>
            <div className="px-4 text-sm">
              <p className="leading-10">
                <span>
                  ‡§µ‡§ø‡§∑‡§Ø: <strong> {apiData?.subject} </strong>
                </span>
                <br />‡§Æ ‡§®‡§ø‡§Æ‡•ç‡§® ‡§µ‡•Å‡§¶‡§æ‡§π‡§∞‡•Å‡§Æ‡§æ ‡§≤‡•á‡§ñ‡§ø‡§è ‡§¨‡§Æ‡•ã‡§ú‡§ø‡§Æ ‡§®‡§ø‡§µ‡•á‡§¶‡§® ‡§ó‡§∞‡•ç‡§¶‡§õ‡•Å :
              </p>
              <div className=" flex flex-col" >
                <text>
                  {" "}
                  ‡•ß. ‡§Æ ‡§®‡§ø‡§µ‡•á‡§¶‡§ï <span> {apiData?.remarks} </span> ‡§¨‡§ø‡§µ‡§æ‡§¶ ‡§®‡§ø‡§∞‡•Å‡§™‡§£‡§ï‡§æ
                  ‡§≤‡§æ‡§ó‡•Ä ‡§Ø‡•ã ‡§®‡§ø‡§µ‡•á‡§¶‡§® ‡§¶‡§ø‡§®‡§æ ‡§Ü‡§è‡§ï‡•ã ‡§õ‡•Å ‡•§{" "}
                </text>
                <br />
                <text>
                  ‡•®. ‡§Ø‡§∏ ‡§∏‡§Æ‡§ø‡§§‡§ø‡§¨‡§æ‡§ü ‡§¶‡•ã‡§∏‡•ç‡§∞‡•ã ‡§™‡§ï‡•ç‡§∑ ‡§ù‡§ø‡§ï‡§æ‡§à ‡§ú‡•á ‡§ú‡•ã ‡§¨‡•Å‡§ù‡•ç‡§®‡•Å‡§™‡§∞‡•ç‡§õ ‡§¨‡•Å‡§ù‡•Ä ‡§µ‡§ø‡§µ‡§æ‡§¶
                  ‡§®‡§ø‡§∞‡•Å‡§™‡§£ ‡§ó‡§∞‡§æ‡§à‡§™‡§æ‡§â ‡•§{" "}
                </text>
                <br />
                <text>
                  {`‡•©. ‡§Ø‡§∏ ‡§¨‡•Ç‡§¢‡•Ä‡§ó‡§Ç‡§ó‡§æ ‡§ó‡§æ‡§â‡§Å‡§™‡§æ‡§≤‡§ø‡§ï‡§æ,‡§ï‡§æ‡§®‡•Ç‡§®‡•Ä ‡§Æ‡§æ‡§Æ‡§ø‡§≤‡§æ ‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä ‡§¨‡§æ‡§ü ‡§ú‡§æ‡§∞‡•Ä
              ‡§≠‡§è‡§ï‡•ã " ‡§®‡•ç‡§Ø‡§æ‡§Ø‡§ø‡§ï ‡§∏‡§Æ‡§ø‡§§‡•Ä ( ‡§ó‡§†‡§® ‡§§‡§•‡§æ ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§∏‡§Ç‡§ö‡§æ‡§≤‡§® ) ‡§ê‡§®‡•ç, ‡•®‡•¶‡•≠‡•Æ" ‡§ï‡•ã ‡§¶‡§´‡§æ
              ‡§¨‡§Æ‡•ã‡§ú‡§ø‡§Æ ‡§®‡§ø‡§µ‡•á‡§¶‡§® ‡§¶‡§∏‡•ç‡§§‡•Å‡§∞ ‡§∞‡•Å.....‡§®‡§ø‡§µ‡•á‡§¶‡§® ‡§∏‡§æ‡§• ‡§¶‡§æ‡§ñ‡§ø‡§≤ ‡§ó‡§∞‡•á‡§ï‡•ã ‡§õ‡•Å ‡•§`}
                </text>
                <br/>
                <text>
                 {` ‡•™. ‡§Ø‡•ã ‡§®‡§ø‡§µ‡•á‡§¶‡§® " ‡§®‡•ç‡§Ø‡§æ‡§Ø‡§ø‡§ï ‡§∏‡§Æ‡§ø‡§§‡•Ä (‡§ó‡§†‡§® ‡§§‡§•‡§æ ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§∏‡§Ç‡§ö‡§æ‡§≤‡§® )
                  ‡§ê‡§®‡•ç,‡•®‡•¶‡•≠‡•Æ"‡§ï‡•ã ‡§¶‡§´‡§æ`}
                  <span className="font-bold"> {apiData?.subject} </span> ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§Ø‡§∏‡•à ‡§∏‡§Æ‡§ø‡§§‡•Ä ‡§ï‡•ã ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§∞ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§≠‡§ø‡§§‡•ç‡§∞ ‡§™‡§∞‡•ç‡§¶‡§õ ‡•§
                  
                </text>

                <br />
                <text>
                  ‡•´. ‡§Ø‡•ã ‡§®‡§ø‡§µ‡•á‡§¶‡§® ‡§π‡§¶ ‡§Æ‡•ç‡§Ø‡§æ‡§¶ ‡§≠‡§ø‡§§‡•ç‡§∞‡•à ‡§õ ‡§∞ ‡§Æ ‡§®‡§ø‡§µ‡•á‡§¶‡§ï ‡§≤‡§æ‡§à ‡§Ø‡§∏ ‡§µ‡§ø‡§∑‡§Ø‡§Æ‡§æ ‡§®‡§ø‡§µ‡•á‡§¶‡§®
                  ‡§¶‡§ø‡§®‡•á ‡§π‡§ï ‡§¶‡•à‡§á ‡§Ø‡§æ ‡§™‡•ç‡§∞‡§™‡•ç‡§§ ‡§õ ‡•§
                </text>
                <br />
                <text>
                  ‡•¨. ‡§Ø‡§∏ ‡§µ‡§ø‡§∑‡§Ø‡§Æ‡§æ ‡§Ö‡§®‡•ç‡§Ø‡§§‡•ç‡§∞ ‡§ï‡•á‡§π‡§ø ‡§ï‡§§‡•à ‡§ï‡•Å‡§®‡•à ‡§™‡§®‡§ø ‡§®‡§ø‡§ï‡§Ø ‡§Æ‡§æ ‡§ï‡•Å‡§®‡•à ‡§™‡•ç‡§∞‡§ï‡§∞ ‡§ï‡•ã
                  ‡§®‡§ø‡§µ‡•á‡§¶‡§® ‡§¶‡§ø‡§è‡§ï‡•ã ‡§õ‡•à‡§® ‡•§
                </text>
                <br />

                <text>
                  ‡•≠. ‡§Ø‡§∏ ‡§µ‡§ø‡§∑‡§Ø‡§Æ‡§æ ‡§∏‡•Å‡§®‡•ç‡§®‡•á ‡§∏‡§æ‡§ï‡•ç‡§∑‡•Ä ‡§π‡§∞‡•Å‡§≤‡§æ‡§à ‡§®‡•ç‡§Ø‡§æ‡§Ø‡§ø‡§ï ‡§∏‡§Æ‡§ø‡§§‡•Ä ‡§≤‡•á ‡§ñ‡•ã‡§ú‡•á‡§ï‡•ã
                  ‡§¨‡•á‡§≤‡§æ‡§Æ‡§æ ‡§â‡§™‡§∏‡•ç‡§•‡§ø‡§§ ‡§ó‡§∞‡§æ‡§â‡§®‡•á ‡§õ‡•Å 
                </text>
                <br />
                <text>
                  ‡§ï.
                </text>
                <br />

                <text>
                  ‡§ñ. 
                </text>
                <br />

                <text>
                  ‡•Æ. ‡§Ø‡§∏‡•ç‡§Æ‡§æ ‡§≤‡•á‡§ñ‡§ø‡§è‡§ï‡§æ ‡§µ‡•ç‡§Ø‡§π‡•ã‡§∞‡§æ ‡§†‡§ø‡§ï ‡§∏‡§æ‡§ö‡•ã ‡§∏‡§§‡•ç‡§Ø ‡§π‡•Å‡§®‡•ç,‡§ù‡•Å‡§ü‡§æ ‡§†‡§π‡§∞‡•á ‡§ï‡§æ‡§®‡•Å‡§®
                  ‡§¨‡§Æ‡•ã‡§ú‡§ø‡§Æ ‡§∏‡§ú‡§æ‡§Ø ‡§≠‡•ã‡§ó ‡§® ‡§§‡§Ø‡§æ‡§∞ ‡§õ‡•Å ‡•§ 
                </text>

                <br />
                <text>
                  ‡§á‡§§‡•Ä ‡§∏‡§Ç‡§µ‡§§
                  <strong>‡•®‡•¶‡•≠‡•Ø</strong> ‡§∏‡§æ‡§≤ <strong> ‡•¶‡•≠</strong> ‡§Æ‡§π‡§ø‡§®‡§æ
                  <strong> ‡•ß‡•¨</strong>
                  ‡§ó‡§§‡•á......‡§∞‡•ã‡§ú ‡§∂‡•Å‡§≠‡§Æ ‡•§
                </text>
              </div>
            </div>
            <div className="flex justify-end">
              <p className="px-10 py-5 leading-5 text-sm">
                ‡§®‡§ø‡§µ‡•á‡§¶‡§ï <br /> 
                {apiData?.petitionerrViewModelList?.map((items,index)=>{
                  return(
                    <div key={index}>
                    ‡§®‡§æ‡§Æ: <span className="font-bold" > {items?.fullName}
                       </span  >  
                    </div>
                  )
                })}
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
