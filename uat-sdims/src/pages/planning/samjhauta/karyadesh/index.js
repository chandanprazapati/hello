import Image from "next/image";
import { useEffect, useRef, useState } from "react";
import { useReactToPrint } from "react-to-print";
import { AiOutlineDownload } from "react-icons/ai";
import "nepali-datepicker-reactjs/dist/index.css";
import BikramSambat from "bikram-sambat-js";
const BS = require("bikram-sambat-js");
import { fiscal } from "../../../../services/apiServices/common/fiscal/fiscalService";
import { toast } from "react-toastify";
import { getSamjhautaReport } from "../../../../services/apiServices/planning/report/reportService";
import PlanningHeaderReport from "../../../../components/reusableDesign/PlanningHeaderReport";
import {englishToNepali} from "../../../../utils/utility";
import { planningSamjhauta } from "../../../../services/apiServices/planning/planningSamjhauta/planningSamjhautaService";
import { employee } from "../../../../services/apiServices/employee/employeesetup/employeeService";
const Index = () => {
  const aa = new BikramSambat(new Date()).toBS();

  const componentRef = useRef();
  const handlePrint = useReactToPrint({
    content: () => componentRef.current,
  });

  // for yojanaNameId
  const [yojanaNameId, setYojanaNameId] = useState([]);
  const [projectName, setYojanaNameValue] = useState("");

  const handleYojanaName = (e) => {
    setYojanaNameValue(e.target.value);
  };
  useEffect(() => {
    let yojanaNameApiData = () => {
      planningSamjhauta().then((response) => {
        try {
          response.status === true;

          {
            setYojanaNameId(response.data);
          }
        } catch (error) {}
      });
    };

    yojanaNameApiData();
  }, []);

  // for fiscalYearId
  const [fiscalId, setFiscalId] = useState([]);
  const [fiscalYearid, setFiscalValue] = useState("");

  const handleFiscalYear = (e) => {
    setFiscalValue(e.target.value);
  };

  useEffect(() => {
    let fiscalApiData = () => {
      fiscal().then((response) => {
        try {
          response.status === true;

          {
            setFiscalId(response.data);
          }
        } catch (error) {}
      });
    };

    fiscalApiData();
  }, []);

  const [apiDataEmployee, setApiDataEmployee] = useState([]);
  const [empId, setApiDataEmployeeId] = useState("");

  const handleEmployee = (e) => {
    setApiDataEmployeeId(e.target.value);
  };

  useEffect(() => {
    let employeeApiData = () => {
      employee().then((response) => {
        try {
          response.status === true;
          {
            setApiDataEmployee(response.data);
          }
        } catch (error) {
          toast.error(response.message, {
            autoClose: 1000,
          });
        }
      });
    };
    employeeApiData();
  }, [setApiDataEmployee]);

  //   for genrate receipt according to id

  const [apiData, setApiData] = useState([]);
  useEffect(() => {
    let receiptApiData = () => {
      getSamjhautaReport(fiscalYearid, projectName,empId).then((response) => {
        try {
          response.status === true;
          {
            setApiData(response.data);
            setLoading(false);
          }
        } catch (error) {
          toast.success("Fetched Data", {
            icon: "üöÄ",
            autoClose: 1000,
          });
        }
      });
    };
    receiptApiData();
  }, [fiscalYearid, projectName,empId]);

  return (
    <>
      <form className="grid lg:grid-cols-4  gap-5 px-5 pt-10 border border-black border-dashed shadow-2xl bg-gray-100  ">
        <div className="font-bold text-lg text-red-600">
          ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§Ü‡§¶‡•á‡§∂ ‡§¶‡§ø‡§è‡§ï‡•ã ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§∏‡§ø‡§∞‡•ç‡§ú‡§®‡§æ ‡§ó‡§∞‡•ç‡§® ‡§Ø‡•ã‡§ú‡§®‡§æ‡§ï‡•ã ‡§®‡§æ‡§Æ ‡§∞ ‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§µ‡§∞‡•ç‡§∑
          ‡§õ‡§æ‡§®‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç ||
        </div>
        <div className="relative z-0 w-full mb-6 group">
          <label className="label text-blue-900 ">‡§Ø‡•ã‡§ú‡§®‡§æ‡§ï‡•ã ‡§®‡§æ‡§Æ</label>
          <select
            onChange={handleYojanaName}
            value={projectName}
            className="peer"
            required
          >
            <option value={""} selected disabled>
              ---- ‡§Ø‡•ã‡§ú‡§®‡§æ‡§ï‡•ã ‡§®‡§æ‡§Æ ‡§õ‡§æ‡§®‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç ----
            </option>

            {yojanaNameId.map((items, index) => {
              return (
                <option key={index} value={items?.planningSamjhautaId}>
                  {items.project_Name}
                </option>
              );
            })}
          </select>
        </div>

        <div className="relative z-0 w-full mb-6 group">
          <label className="label text-blue-900 ">‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§µ‡§∞‡•ç‡§∑</label>
          <select
            onChange={handleFiscalYear}
            value={fiscalYearid}
            className="peer"
            required
          >
            <option value={""} selected disabled>
              ---- ‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§µ‡§∞‡•ç‡§∑ ‡§õ‡§æ‡§®‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç ----
            </option>

            {fiscalId.map((items, index) => {
              return (
                <option key={index} value={items?.id}>
                  {items.name}
                </option>
              );
            })}
          </select>
        </div>

        <div className="relative z-0 w-full mb-6 group">
          <label className="label text-blue-900 ">‡§ï‡§∞‡•ç‡§Æ‡§ö‡§æ‡§∞‡•Ä‡§ï‡•ã ‡§®‡§æ‡§Æ</label>
          <select
            onChange={handleEmployee}
            value={empId}
            className="peer"
            required
          >
            <option value={""} selected disabled>
              ---- ‡§ï‡§∞‡•ç‡§Æ‡§ö‡§æ‡§∞‡•Ä‡§ï‡•ã ‡§®‡§æ‡§Æ ‡§õ‡§æ‡§®‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç ----
            </option>

            {apiDataEmployee.map((items, index) => {
              return (
                <option key={index} value={items?.id}>
                 {items.firstName} {items.middleName} {items.lastName} [
                {englishToNepali(items.empCode)}]
                </option>
              );
            })}
          </select>
        </div>

      </form>
      <div className="flex-col pt-4 bg-[#F0F1F5] px-3 ">
        <div
          className="flex flex-col xl:flex-row my-10 gap-8"
          ref={componentRef}
        >
          <div className="bg-[url('https://res.cloudinary.com/dg1opyudu/image/upload/v1684819916/1_ga21iq.jpg')] rounded-xl p-5 w-full ">
            <div className="flex justify-between pb-10  ">
              <div>
                <Image
                  src="https://res.cloudinary.com/dg1opyudu/image/upload/v1678796501/SDIMS/Emblem_of_Nepal_c3mw8w.png"
                  height={120}
                  width={120}
                  alt="nagarpalika logo"
                  priority
                />
              </div>
              
              <PlanningHeaderReport/>
              <div className="text-xl font-bold pt-20">‡§Æ‡§ø‡§§‡§ø : {englishToNepali(aa)}</div>
            </div>

            <div className="font-bold leading-8 ">
              <div>‡§™‡§§‡•ç‡§∞ ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ : </div>
              <div>‡§ö‡§≤‡§æ‡§®‡•Ä ‡§®‡§Æ‡•ç‡§¨‡§∞ :</div>
            </div>

            <div className="text-2xl font-bold flex justify-center">
              ‡§µ‡§ø‡§∑‡§Ø: ‡§ï‡§æ‡§∞‡•ç‡§Ø ‡§Ü‡§¶‡•á‡§∂ ‡§¶‡§ø‡§è‡§ï‡•ã ‡•§
            </div>
            <div className="py-10 px-10 ">
              <text>‡§∂‡•ç‡§∞‡•Ä‡§Æ‡§æ‡§®‡•ç</text> <br />
              <text className="text-center tracking-normal leading-loose ">
                ‡§â‡§™‡§∞‡•ã‡§ï‡•ç‡§§ ‡§µ‡§ø‡§∑‡§Ø‡§Æ‡§æ ‡§Ü.‡§µ
                {apiData?.fiscalYearName ? (
                  <span className="font-bold px-1 ">
                    {" "}
                    {apiData?.fiscalYearName}{" "}
                  </span>
                ) : (
                  "......................."
                )}{" "}
                ‡§ï‡•ã{" "}
                
                ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡•ç‡§∞‡§Æ‡§µ‡§æ‡§ü
                {apiData?.project_Name ? (
                  <span className="font-bold px-1 ">
                    {" "}
                    {apiData?.project_Name}{" "}
                  </span>
                ) : (
                  "......................."
                )}{" "}
                ‡§â.‡§∏.‡§§‡•ç‡§∞‡§ø.‡§®.‡§™‡§æ ‡§¨‡•Ä‡§ö
                {apiData?.fiscalYearName ? (
                  <span className="font-bold px-1 ">
                    {" "}
                    {apiData?.fiscalYearName}{" "}
                  </span>
                ) : (
                  "......................."
                )}{" "}
                ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡•ã ‡§≤‡§æ‡§ó‡§ø ‡§Æ‡§ø‡§§‡§ø
                {apiData?.project_Start_Date ? (
                  <span className="font-bold px-1 ">
                    {" "}
                    {apiData?.project_Start_Date}{" "}
                  </span>
                ) : (
                  "......................."
                )}{" "}
                ‡§Æ‡§æ ‡§≠‡§è‡§ï‡•ã ‡§∏‡§Æ‡•ç‡§ù‡•ã‡•á‡§§‡§æ ‡§¨‡§Æ‡•ã‡§ú‡§ø‡§Æ ‡§Ø‡§∏ ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§≤‡§Ø‡§ï‡•ã ‡§™‡•ç‡§∞‡§æ‡§µ‡§ø‡§ß‡§ø‡§ï‡§ï‡•ã ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡§ï‡•ç‡§∑
                ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂‡§®‡§Æ‡§æ ‡§ó‡•Å‡§£‡§∏‡•ç‡§§‡§∞‡•Ä‡§Ø ‡§∞ ‡§∏‡§Æ‡•ç‡§ù‡•ã‡•á‡§§‡§æ‡§Æ‡§æ ‡§â‡§≤‡•ç‡§≤‡•á‡§ñ ‡§≠‡§è‡§ï‡•ã ‡§∏‡§Æ‡§Ø ‡§≠‡§ø‡§§‡•ç‡§∞ ‡§®‡•à ‡§Ø‡•ã‡§ú‡§®‡§æ
                ‡§∏‡§Æ‡•ç‡§™‡§®‡•ç‡§® ‡§ó‡§∞‡•ç‡§® ‡§π‡•Å‡§® ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§¶‡•á‡§∂ ‡§¶‡§ø‡§á‡§è‡§ï‡•ã ‡§õ ‡•§
              </text>
            </div>

            <div className="px-10 font-bold flex flex-col gap-3 ">
              <text className=" text-xl">‡§Ö‡§®‡•ç‡§Ø ‡§∞‡§æ‡§Ø</text>
              <text className=" underline ">‡§Ö‡§∏‡§Ç‡§≤‡§ó‡•ç‡§® ‡§ï‡§æ‡§ó‡§ú‡§æ‡§§‡§π‡§∞‡•Å</text>
            </div>
            <div className="px-10 pt-4 gap-3 flex flex-col ">
              <div className="flex justify-between">
                <text>‡•ß.‡§µ‡§°‡§æ ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∏</text>
                <div>‡§≠‡§è‡§ï‡•ã/‡§®‡§≠‡§è‡§ï‡•ã</div>
              </div>

              <div className="flex justify-between">
                <text>‡•®.‡§â.‡§∏.‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§£</text>
                <div>‡§≠‡§è‡§ï‡•ã/‡§®‡§≠‡§è‡§ï‡•ã</div>
              </div>

              <div className="flex justify-between">
                <text>‡•©.‡§≤‡§æ‡§ó‡§§ ‡§∏‡•ç‡§ü‡§ø‡§Æ‡•á‡§ü</text>
                <div>‡§≠‡§è‡§ï‡•ã/‡§®‡§≠‡§è‡§ï‡•ã</div>
              </div>

              <div className="flex justify-between">
                <text>‡•™.‡§Ø‡•ã‡§ú‡§®‡§æ ‡§∏‡•Å‡§∞‡•Å ‡§π‡•Å‡§®‡•Å ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï‡•ã ‡§´‡•ã‡§ü‡•ã</text>
                <div>‡§≠‡§è‡§ï‡•ã/‡§®‡§≠‡§è‡§ï‡•ã</div>
              </div>

              <div className="flex justify-between">
                <div>
                  <text>‡•´.‡§™‡•ç‡§∞‡§æ‡§¨‡§ø‡§ß‡§ø‡§ï ‡§ï‡§æ‡§ó‡§ú‡§æ‡§§‡§π‡§∞‡•Å</text>
                  <div className="flex flex-col gap-2 px-6">
                    <text>‡§ï) ‡§∞‡•á‡§ü ‡§è‡§®‡§æ‡§≤‡§æ‡§á‡§∏‡§ø‡§∏</text>
                    <text>‡§ñ) ‡§°‡•Ä‡§ü‡•á‡§≤‡•ç‡§° ‡§á‡§∏‡•ç‡§ü‡§Æ‡•á‡§ü</text>
                    <text>‡§ó) ‡§ñ‡§∞‡•ç‡§ö‡§ï‡•ã ‡§§‡§æ‡§∞‡•á‡§ú</text>
                  </div>
                </div>
                <div>‡§≠‡§è‡§ï‡•ã/‡§®‡§≠‡§è‡§ï‡•ã</div>
              </div>
            </div>

            <div className="px-10 flex justify-around pt-10 ">
              <div className="flex flex-col">
                <text>----------------------------</text>
                <text className="font-bold pl-12 ">‡§™‡•á‡§∂ ‡§ó‡§∞‡•ç‡§®‡•á</text>
              </div>

              <div className="flex flex-col">
                <text>----------------------------</text>
                <text className="font-bold pl-12 ">‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∏ ‡§ó‡§∞‡•ç‡§®‡•á</text>
              </div>

              <div className="flex flex-col">
                <text>----------------------------</text>
                <text className="font-bold pl-12 ">‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§ ‡§ó‡§∞‡•ç‡§®‡•á</text>
              </div>
            </div>
          </div>

          <br />
        </div>

        <div className="flex justify-end">
          <button
            className="flex justify-end items-center bg-white rounded-xl p-3 gap-2"
            onClick={handlePrint}
          >
            <AiOutlineDownload size={20} />
            Download
          </button>
        </div>
        <br />
      </div>
    </>
  );
};

export default Index;
